{"version":3,"sources":["components/Utilities/SortHandlers.js","components/InventoryAdjustments/InventoryAdjustments.js"],"names":["descendingComparator","a","b","orderBy","module","exports","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","headcells","id","label","InventoryAdjustments","props","React","useState","data","setData","locationIdValue","setLocationIdValue","locationCodeValue","setLocationCodeValue","allLocationData","setAllLocationData","loading","setLoading","setselected","anchorEl","setAnchorEl","setOrder","setOrderBy","openMenu","Boolean","setValue","filteredData","setFilteredData","itemChecked","setItemChecked","newSet","setNewSet","inputValue","setInputValue","allLocationCodes","setAllLocationCodes","isDataFetched","setIsDataFetched","FilteredColumns","localStorage","getItem","split","useEffect","Get","result","codes","locationData","JSON","stringify","uniqueLocationData","Set","Array","from","parse","arr","i","length","push","LocationCode","result2","open","message","severity","time","e","console","log","handleLocationCodeChange","newValue","LocationId","handleRequestSort","event","property","StyledTableRow","withStyles","theme","root","backgroundColor","TableRow","StyledTableCell","padding","TableCell","createSortHandler","handleCloseMenu","handleClickMenu","currentTarget","handleonChangeMenu","columnName","includes","splice","indexOf","setItem","handleAdjustments","j","itemKey","adjustmentQty","utcDate","Date","Post","description","lotNumber","expiration","slice","qtyOnHand","prodQtyIssued","inTransitQty","backupQty","pickedNotShippedQty","pickInventory","binsQty","comment","adjustmentDateTime","toUTCString","status","sx","width","elevation","mb","direction","xs","sm","mt","disablePortal","value","onChange","onInputChange","newInputValue","options","marginLeft","marginRight","renderInput","params","variant","minWidth","height","marginTop","className","size","placeholder","InputProps","endAdornment","onClick","onClose","item","control","checked","style","overflow","textOverflow","component","m","maxHeight","stickyHeader","filter","column","fontWeight","sortDirection","active","color","visuallyHidden","close","target","filterTable","o","Object","keys","some","k","String","toLowerCase","hover","tempSet","handleCheckBox","align"],"mappings":"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","file":"static/js/10.c55fb5e3.chunk.js","sourcesContent":["function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n  \n  function getComparator(order, orderBy) {\n    return order === \"desc\"\n      ? (a, b) => descendingComparator(a, b, orderBy)\n      : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n  \n  // This method is created for cross-browser compatibility, if you don't\n  // need to support IE11, you can use Array.prototype.sort() directly\n  function stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) {\n        return order;\n      }\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n  }\n\n\n  module.exports = {descendingComparator,getComparator,stableSort}","import React, { useState, useEffect } from \"react\";\nimport Breadcrumbs from \"../SharedComponents/Breadcrumbs\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Button from \"@mui/material/Button\";\nimport { InputLabel, Autocomplete, TextField } from \"@mui/material\";\nimport Select from \"@mui/material/Select\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport { Get, Post } from './../Utilities/AxiosHandler';\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Stack from \"@mui/material/Stack\";\nimport Grid from '@mui/material/Grid';\nimport Loader from \"./../SharedComponents/Loaders/Loader.js\";\n\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport Typography from \"@mui/material/Typography\";\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport { visuallyHidden } from \"@mui/utils\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport { descendingComparator, getComparator, stableSort } from '../Utilities/SortHandlers';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport IconButton from '@mui/material/IconButton';\nimport Notification from \"../SharedComponents/Notification\"\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ViewWeekSharpIcon from '@mui/icons-material/ViewWeekSharp';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Menu from \"@mui/material/Menu\";\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip from '@mui/material/Tooltip';\nimport SearchIcon from \"@material-ui/icons/Search\";\n\n\nconst headcells = [\n    {\n      id: \"CheckBoxes\",\n      label: \"\",\n    },\n    {\n      id: \"itemKey\",\n      label: \"Item Key\",\n      \n    },\n    {\n      id: \"description\",\n      label: \"Description\",\n      \n    },\n \n    {\n      id: \"lotNumber\",\n      label: \"Lot Number\",\n      \n    },\n    {\n      id: \"expiration\",\n      label: \"Lot Expiration\",\n      \n    },\n    {\n      id: \"qtyOnHand\",\n      label: \"Qty on Hand\",\n      \n    },\n    {\n      id: \"prodQtyIssued\",\n      label: \"Prod Qty Issued\",\n      \n    },\n    {\n      id: \"inTransitQty\",\n      label: \"In Transit\",\n      \n    },\n    {\n      id: \"backupQty\",\n      label: \"Backup\",\n     \n    },\n    {\n      id: \"pickedNotShippedQty\",\n      label: \"Picked Not Shipped\",\n     \n    },\n    {\n      id: \"pickInventory\",\n      label: \"Pick Inventory\",\n      \n    },\n    {\n      id: \"binsQty\",\n      label: \"Bins\",\n      \n    },\n    \n\n    {\n      id: \"adjustmentQty\",\n      label: \"Adjustments\",\n      \n    },\n\n    {\n      id: \"comment\",\n      label: \"Comments\",\n      \n    }\n];\n\n\nfunction InventoryAdjustments(props) {\n    const [data, setData] = React.useState([]);\n    const [locationIdValue, setLocationIdValue] = React.useState(\"2\");\n    const [locationCodeValue, setLocationCodeValue] = React.useState('2120');\n    const [allLocationData, setAllLocationData] = React.useState([]);\n    const [loading, setLoading] = useState(true);\n    const [selected,setselected] = React.useState([])\n    const [anchorEl,setAnchorEl]= React.useState(null)\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"\");\n    const openMenu = Boolean(anchorEl);\n    const [value, setValue] = React.useState('');\n    const [filteredData, setFilteredData] = React.useState(data);\n    const [itemChecked, setItemChecked] = React.useState([]);\n    const [newSet, setNewSet] = React.useState([]);\n    const [inputValue, setInputValue] = React.useState('');\n    const [allLocationCodes, setAllLocationCodes] = React.useState([]);\n    const [isDataFetched,setIsDataFetched]= React.useState(false)\n\n    \n    let FilteredColumns = (localStorage.getItem('AdjustmentsColumns_For_Hiding')!==null)?localStorage.getItem('AdjustmentsColumns_For_Hiding').split(\",\"):[\"a\",\"b\"]\n\n    useEffect(()=>{\n      setselected(FilteredColumns)\n    },[])\n\n    useEffect(()=>{\n    },[itemChecked])\n\n    useEffect(()=>{\n   },[newSet])\n\n    useEffect( async () => {\n      \n      let result = await Get(`/common/getLocationCodeList`, 'prssvl')\n      if (result.data){\n        const codes = result.data;\n        // console.log(\"All Locations\", codes);\n        let locationData = codes.map(JSON.stringify);\n  \n        let uniqueLocationData = new Set(locationData);\n        uniqueLocationData = Array.from(uniqueLocationData).map(JSON.parse);\n\n        setAllLocationData(uniqueLocationData);\n        const arr = [];\n        for(let i=0; i<uniqueLocationData.length; i++){\n          arr.push(uniqueLocationData[i].LocationCode);\n        }\n        setAllLocationCodes(arr);\n      \n      } \n    \n    }, []);\n\n   \n    useEffect( async () => {\n\n      setLoading(true);\n\n      let result2 = await Get(`/InventoryAdjustments/getItemKeysAndAdjustmentDetailsForCycleCount?locationCodeId=` + locationIdValue);\n      \n    try{  \n      if (result2.data){\n        const codes = result2.data;\n        setData(codes);\n        setFilteredData(codes);\n        const obj = {open:true,message:\"Records fetched successfully!\",severity:\"success\",time:2000}\n        setIsDataFetched(obj);\n        // console.log(\"Item Adjustment Details\", codes);\n      }\n      else{\n        const obj = {open:true,message:\"Something went wrong!!\",severity:\"error\",time:5000}\n        setIsDataFetched(obj);\n        setData([]);\n        setFilteredData([]);\n      }\n    }\n    catch(e){\n      console.log(e);\n      setData([]);\n      setFilteredData([]);\n    }\n      setLoading(false);\n\n    },[locationIdValue]);  \n    \n    \n  const handleLocationCodeChange = (newValue) =>{\n    \n      setLocationCodeValue(newValue);\n\n      for(let i =0; i<allLocationData.length; i++){\n        if(allLocationData[i].LocationCode === newValue){\n          const id = allLocationData[i].LocationId;\n          setLocationIdValue(id);\n\n          break;\n        }\n      }      \n\n  }\n\n  const filterData = (e) => {\n    if(e.target.value != \"\"){\n      setValue(e.target.value);\n      const filterTable = data.filter(o=>Object.keys(o).some(k=>String(o[k]).toLowerCase().includes(e.target.value.toLowerCase()) ));\n      setFilteredData([...filterTable]);\n    }\n    else{\n      setValue(e.target.value);\n    }\n  }\n\n  const handleRequestSort = async(event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n  const onRequestSort={handleRequestSort};\n\n  const StyledTableRow = withStyles((theme)=>({\n    root:{\n      '&:nth-of-type(odd)':{\n        backgroundColor:\"white\",\n      },\n      '&:nth-of-type(even)':{\n        backgroundColor:'#eee',\n      },\n    }\n  }))(TableRow);\n\n  const StyledTableCell=withStyles((theme)=>({\n    root:{\n      padding: \"0px 16px\"\n    }\n  }))(TableCell);\n\n  const createSortHandler = (property) => (event) => {\n    handleRequestSort(event, property);\n\n  };\n\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n    setselected(FilteredColumns)\n  \n  };\n\n\n  const handleCheckBox = (item) => {\n    const emptySet = [];\n    setNewSet(emptySet);\n\n    if(itemChecked.includes(item)){\n      const tempSet = itemChecked;\n      const index = tempSet.indexOf(item);\n      if (index > -1) {\n        tempSet.splice(index, 1); \n      }\n      setItemChecked(tempSet);\n\n    }\n    else{\n      const tempSet = [...itemChecked, item];\n      setItemChecked(tempSet);\n\n    }\n  };\n\n  const handleClickMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const  handleonChangeMenu =(columnName)=>{\n    if(FilteredColumns.includes(columnName)){\n      FilteredColumns.splice(FilteredColumns.indexOf(columnName), 1);\n      localStorage.setItem(\"AdjustmentsColumns_For_Hiding\",FilteredColumns)\n  }else{\n  FilteredColumns.push(columnName);\n  localStorage.setItem(\"AdjustmentsColumns_For_Hiding\",FilteredColumns)\n  }\n  setselected(FilteredColumns)\n  }\n\n  const handleAdjustments = async() => {\n\n    let adjustmentData = [];\n    for(let i = 0; i<itemChecked.length; i++){\n      for(let j=0; j<data.length; j++){\n        if(itemChecked[i] === data[j].itemKey && data[j].adjustmentQty != 0 ){\n            const utcDate = new Date();\n            const res = await Post(`/InventoryAdjustments/insertAdjustmentHistoryRecord`, { itemKey: data[j].itemKey,\n              description: data[j].description,\n              lotNumber: data[j].lotNumber,\n              expiration: data[j].expiration.slice(0,10),\n              qtyOnHand: data[j].qtyOnHand,\n              prodQtyIssued: data[j].prodQtyIssued,\n              inTransitQty: data[j].inTransitQty,\n              backupQty: data[j].backupQty,\n              pickedNotShippedQty: data[j].pickedNotShippedQty,\n              pickInventory: data[j].pickInventory,\n              binsQty: data[j].binsQty,\n              adjustmentQty: data[j].adjustmentQty,\n              comment: data[j].comment,\n              adjustmentDateTime: utcDate.toUTCString(),\n              status: null}\n            );\n\n        }\n      }\n    }\n  }\n \n  if (loading) return (\n    <Box  id = \"box\" sx={{ width: \"100%\"}}>\n        <Paper id = \"paper\" elevation={0} sx={{ width: \"100%\", mb: 2 }}>\n         <br></br> \n\n             \n             <Stack direction={{ xs: 'column', sm: 'row' }} sx={{mt:0}}\n                  >\n                  \n                  <Autocomplete\n                      disablePortal\n                      value={locationCodeValue}\n                      onChange={(event, newValue) => {\n                        handleLocationCodeChange(newValue);\n                      }}\n                      inputValue={inputValue}\n                      onInputChange={(event, newInputValue) => {\n                        setInputValue(newInputValue);\n                      }}\n                      options={allLocationCodes}\n                      sx={{ width: 200, marginLeft:4, marginRight:4 }}\n                      renderInput={(params) => <TextField {...params} label=\"Location\" variant='standard' />}\n                    />\n                 \n                  <Button variant=\"contained\" \n                  sx={{ minWidth:120, marginLeft: 1, marginRight: 2, height: 40, marginTop : 1 }}><strong>ADJUST</strong></Button>            \n                <Stack sx={{marginLeft:\"auto\"}} direction={{ xs: 'column', sm: 'row' }}>\n                  <FormControl className=\"SearchBar\" sx={{ marginLeft:\"auto\", marginRight: 1, marginTop: 1, width: 230}}  >\n                  <TextField\n                    variant=\"standard\"        \n                    size = 'small'\n                    placeholder = 'Search'\n\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment>\n                          <IconButton>\n                            <SearchIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      )\n                    }}\n                    \n                  >                           \n                      </TextField>\n                    </FormControl>\n\n                    <Button sx={{marginLeft:\"auto\", marginTop:0, marginRight:2}}   onClick={handleClickMenu}><ViewWeekSharpIcon/></Button>   \n                    </Stack>\n                </Stack>\n\n        <Menu\n          anchorEl={anchorEl}\n          open={openMenu}\n          onClose={handleCloseMenu}\n        >\n        {headcells.slice(1).map((item)=>{\n          return (\n        <MenuItem\n        key={item.label}\n        >\n        <FormControlLabel control={<Checkbox size=\"small\" checked={!FilteredColumns.includes(item.label)}  onChange={()=>handleonChangeMenu(item.label)}  />} label={item.label} />\n        </MenuItem>\n          )\n        })}\n        </Menu>\n       \n\n    <div style={{overflow: \"hidden\", textOverflow: \"ellipsis\", width: '11rem',width:\"auto\"}}>\n        <Box\n        component=\"div\"\n        sx={{\n        textOverflow: 'clip',\n        overflow: 'hidden',\n        m:3\n        }}>\n        <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n        <TableHead>\n        <StyledTableRow>\n          {headcells.filter(column=>(FilteredColumns.includes(column.label)==false)).map((column) => (\n            <StyledTableCell style={{fontWeight:'bold'}}\n              key={column.id}\n              sortDirection={orderBy === column.id ? order : false}\n            >\n                <TableSortLabel\n                active={orderBy === column.id}\n                direction={orderBy === column.id ? order : \"asc\"}\n                onClick={createSortHandler(column.id)}\n                sx={{ color: \"black\", fontWeight: \"bold\" }}>\n              <Typography variant='body'>{column.label}</Typography>\n              {orderBy === column.id ? (\n            <Box component=\"span\" sx={visuallyHidden}>\n            {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n          </Box>\n        ) : null}\n        </TableSortLabel>\n            </StyledTableCell>\n          ))}\n        </StyledTableRow>\n        \n      </TableHead>\n      \n      </Table>\n      <Loader/>\n      </TableContainer>\n      \n      </Box>\n      \n     </div> \n     \n    </Paper>\n  </Box>  \n )\n\n\n    return (\n        <Box  id = \"box\" sx={{ width: \"100%\"}}>\n            {isDataFetched.open && <Notification open={isDataFetched.open} close={setIsDataFetched} message={isDataFetched.message} severity={isDataFetched.severity} time={isDataFetched.time} />}\n            <Paper id = \"paper\" elevation={0} sx={{ width: \"100%\", mb: 2 }}>\n             <br></br>          \n                 <Stack direction={{ xs: 'column', sm: 'row' }} sx={{mt:0}}\n                      >\n                      \n                      <Autocomplete\n                          disablePortal\n                          value={locationCodeValue}\n                          onChange={(event, newValue) => {\n                            handleLocationCodeChange(newValue);\n                          }}\n                          inputValue={inputValue}\n                          onInputChange={(event, newInputValue) => {\n                            setInputValue(newInputValue);\n                          }}\n                          options={allLocationCodes}\n                          sx={{ width: 200, marginLeft:4, marginRight:4 }}\n                          renderInput={(params) => <TextField {...params} label=\"Location\" variant='standard' />}\n                        />\n                     \n                      <Button variant=\"contained\" \n                      onClick={() => {handleAdjustments()}}\n                      sx={{ minWidth:120, marginLeft: 1, marginRight: 2, height: 40, marginTop : 1 }}><strong>ADJUST</strong></Button>            \n                    <Stack sx={{marginLeft:\"auto\"}} direction={{ xs: 'column', sm: 'row' }}>\n                      <FormControl className=\"SearchBar\" sx={{ marginLeft:\"auto\", marginRight: 1, marginTop: 1, width: 230}}  >\n                      <TextField\n                        variant=\"standard\"        \n                        size = 'small'\n                        placeholder = 'Search'\n                        onChange={filterData}\n\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment>\n                              <IconButton>\n                                <SearchIcon />\n                              </IconButton>\n                            </InputAdornment>\n                          )\n                        }}\n                        \n                      >                           \n                          </TextField>\n                        </FormControl>\n\n                        <Button sx={{marginLeft:\"auto\", marginTop:0, marginRight:2}}   onClick={handleClickMenu}><ViewWeekSharpIcon/></Button>   \n                        </Stack>\n                    </Stack>\n\n            <Menu\n              anchorEl={anchorEl}\n              open={openMenu}\n              onClose={handleCloseMenu}\n            >\n            {headcells.slice(1).map((item)=>{\n              return (\n            <MenuItem\n            key={item.label}\n            >\n            <FormControlLabel control={<Checkbox size=\"small\" checked={!FilteredColumns.includes(item.label)}  onChange={()=>handleonChangeMenu(item.label)}  />} label={item.label} />\n            </MenuItem>\n              )\n            })}\n            </Menu>\n           \n\n        <div style={{overflow: \"hidden\", textOverflow: \"ellipsis\", width: '11rem',width:\"auto\"}}>\n            <Box\n            component=\"div\"\n            sx={{\n            textOverflow: 'clip',\n            overflow: 'hidden',\n            m:3\n            }}>\n            <TableContainer sx={{ maxHeight: 440 }}>\n            <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n            <StyledTableRow>\n              {headcells.filter(column=>(FilteredColumns.includes(column.label)==false)).map((column) => (\n                <StyledTableCell style={{fontWeight:'bold'}}\n                  key={column.id}\n                  sortDirection={orderBy === column.id ? order : false}\n                >\n                    <TableSortLabel\n                    active={orderBy === column.id}\n                    direction={orderBy === column.id ? order : \"asc\"}\n                    onClick={createSortHandler(column.id)}\n                    sx={{ color: \"black\", fontWeight: \"bold\" }}>\n                  <Typography variant='body'>{column.label}</Typography>\n                  {orderBy === column.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n              </Box>\n            ) : null}\n            </TableSortLabel>\n                </StyledTableCell>\n              ))}\n            </StyledTableRow>\n          </TableHead>\n          <TableBody>\n\n                  \n              {stableSort(filteredData, getComparator(order, orderBy))\n              .map((data) => {\n                     \n                  return (\n                   \n                    <StyledTableRow\n                      hover\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          // indeterminate={numSelected > 0 && numSelected < rowCount}\n                          checked={itemChecked.includes(data.itemKey) ? true : false }\n                          onChange={() => {handleCheckBox(data.itemKey)}}\n                        />\n                      </TableCell>\n                      {FilteredColumns.includes('Item Key')==false && <StyledTableCell  key=\"itemKey\" ><Typography  component={'span'} variant=\"body1\">{data.itemKey}\n                                                    </Typography>\n                                                    \n                                                </StyledTableCell>}\n                    \n                      {FilteredColumns.includes('Description')==false && <StyledTableCell key=\"description\"><Typography  component={'span'} variant=\"body1\">{data.description}\n                                                    </Typography>\n                                                    \n                                                </StyledTableCell>}\n                      {FilteredColumns.includes('Lot Number')==false &&  <StyledTableCell  key=\"lotNumber\"><Typography  component={'span'} variant=\"body1\">{data.lotNumber}\n                                                    </Typography>\n                                                    \n                                                    \n                                                </StyledTableCell>}\n\n                      {FilteredColumns.includes('Lot Expiration')==false &&  <StyledTableCell  key=\"expiration\"><Typography  component={'span'} variant=\"body1\">{data.expiration.slice(0,10)}\n                                                    </Typography>\n                                                    \n                                                    \n                                                </StyledTableCell>}                          \n                      {FilteredColumns.includes('Qty on Hand')==false && <StyledTableCell align='right' key=\"qtyOnHand\"><Typography  component={'span'} variant=\"body1\">{data.qtyOnHand}\n                                                    </Typography>\n                                                    \n                                                </StyledTableCell>}\n                       {FilteredColumns.includes('Prod Qty Issued')==false &&  <StyledTableCell align='right' key=\"prodQtyIssued\"><Typography  component={'span'} variant=\"body1\">{data.prodQtyIssued}\n                                                    </Typography> \n                                                    \n                                                </StyledTableCell>}\n                       {FilteredColumns.includes('In Transit')==false &&  <StyledTableCell align='right' key=\"inTransitQty\"><Typography  component={'span'} variant=\"body1\">{data.inTransitQty}\n                                                    </Typography>\n                                                    \n                                                </StyledTableCell>}\n                       {FilteredColumns.includes('Backup')==false &&  <StyledTableCell align='right' key=\"backupQty\"><Typography  component={'span'} variant=\"body1\">{data.backupQty}\n                                                    </Typography>\n                                                    \n                                                </StyledTableCell>}\n                      {FilteredColumns.includes('Picked Not Shipped')==false &&  <StyledTableCell align='right' key=\"pickedNotShippedQty\"><Typography  component={'span'} variant=\"body1\">{data.pickedNotShippedQty}\n                                                    </Typography>\n                                                    \n                                                </StyledTableCell>}\n                      {FilteredColumns.includes('Pick Inventory')==false &&  <StyledTableCell align='right' key=\"pickInventory\"><Typography  component={'span'} variant=\"body1\" >{data.pickInventory}\n                                                    </Typography>\n                                                    \n                                                    </StyledTableCell>}\n                      {FilteredColumns.includes('Bins')==false &&  <StyledTableCell align='right' key=\"binsQty\"><Typography  component={'span'} variant=\"body1\">{data.binsQty}\n                                                    </Typography>\n                                                    \n          \n                                                </StyledTableCell>}\n                      {FilteredColumns.includes('Adjustments')==false &&  <StyledTableCell align='right' key=\"adjustmentQty\"><Typography  component={'span'} variant=\"body1\">{data.adjustmentQty}\n                                                    </Typography>\n                                                    \n          \n                                                </StyledTableCell>}\n                                                \n                      {FilteredColumns.includes('Comments')==false &&  <StyledTableCell key=\"comment\"><Typography  component={'span'} variant=\"body1\">{data.comment}\n                                                  </Typography>\n                                                  \n\n                                              </StyledTableCell>                          \n                                                }\n                     \n  \n                    </StyledTableRow>\n\n                 );\n  \n                })}\n              </TableBody>\n              </Table>\n              </TableContainer>\n              </Box>\n              </div>\n\n             \n    \n            </Paper>\n        </Box>          \n)\n\n}\nexport default InventoryAdjustments ;"],"sourceRoot":""}