{"version":3,"sources":["components/SharedComponents/FileButtons/ExportBtn.js","components/CycleCountHistory/CycleCountHistory.js"],"names":["ExportButton","props","useState","open","snakbar","setSnakbar","reportId","Error","exporturl","setExportURL","loading","setLoading","theme","useTheme","handleSubmit","event","a","GetExcel","response","data","date","Date","document","createElement","href","download","toLocaleString","click","message","severity","time","console","log","snak","useEffect","keys","Object","values","process","i","length","Fragment","close","fullWidth","variant","onClick","component","size","sx","color","palette","secondary","main","position","top","left","marginTop","marginLeft","CycleCountHistory","React","ChangeLocationCode","setChangeLocationCode","LocationCodes","setLocationCodes","FromDate","setFromDate","moment","format","Todate","setTodate","Get","result","codes","handleChangeLocationCode","target","value","m","elevation","width","direction","mt","label","name","role","labelId","id","onChange","map","ele","LocationCode","dateAdapter","AdapterDateFns","newValue","renderInput","params"],"mappings":"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","file":"static/js/7.56c40282.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Button from \"@mui/material/Button\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { GetExcel } from \"./../../Utilities/AxiosHandler\";\nimport Notification from \"./../Notification\";\n\nconst ExportButton = (props) => {\n  const [snakbar, setSnakbar] = useState({ open: false });\n\n  if (!props.reportId)\n    throw new Error(\"Import Button requires reportType prop\");\n\n  const [exporturl, setExportURL] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const theme = useTheme();\n\n  const handleSubmit = async (event) => {\n    setLoading(true);\n    try {\n      const response = await GetExcel(exporturl)\n      if(response.data){\n      let date = new Date();\n          var a = document.createElement(\"a\");\n          a.href =\n            \"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,\" +\n            response.data;\n          \n          a.download = `${props.reportId}_${date.toLocaleString()}.xlsx`;\n          a.click();\n\n          const snak = {\n            open: true,\n            message: \"File Downloaded Successfully\",\n            severity: \"success\",\n            time : 1500\n          };\n          setSnakbar(snak);\n\n      }\n    } catch (error) {\n      console.log({...error});\n      const snak = {\n        open: true,\n        message: error.response.data.message,\n        severity: \"error\",\n        time : null\n      };\n      setSnakbar(snak);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    const data = props.data;\n    const keys = Object.keys(data);\n    const values = Object.values(data);\n    const prssvl = process.env.REACT_APP_PRSSVL;\n    let exporturl = `${prssvl}/ExportImport/export?reportId=${props.reportId}`;\n\n    for (let i = 0; i < keys.length; i++) {\n      exporturl = exporturl + \"&\";\n      exporturl = exporturl + keys[i] + \"=\" + values[i];\n    }\n    console.log(exporturl);\n    setExportURL(exporturl);\n  }, [props]);\n\n  return (\n    <React.Fragment>\n      {snakbar.open && (\n        <Notification\n          open={snakbar.open}\n          close={setSnakbar}\n          time={snakbar.time}\n          message={snakbar.message}\n          severity={snakbar.severity}\n        />\n      )}\n      \n    <Button\n      fullWidth\n      variant=\"contained\"\n      onClick={handleSubmit}\n      component=\"span\"\n    >\n      {!loading && \"Export\"}\n      {loading && \"Downloading...\"}\n      {loading && (\n        <CircularProgress\n          size={24}\n          sx={{\n            color: `${theme.palette.secondary.main}`,\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            marginTop: \"-12px\",\n            marginLeft: \"-12px\",\n          }}\n        />\n      )}\n    </Button>\n    </React.Fragment>\n  );\n};\n\nexport default ExportButton;\n","import React,{useState, useEffect} from 'react';\nimport Button from '@mui/material/Button';\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport { Select } from '@mui/material';\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Stack from \"@mui/material/Stack\";\nimport  TextField  from \"@mui/material/TextField\";\nimport { Get, Post } from '../Utilities/AxiosHandler';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport ExportButton from './../SharedComponents/FileButtons/ExportBtn'\nimport moment from 'moment';\nimport Grid from '@mui/material/Grid';\nexport default function CycleCountHistory(){\n    const [ChangeLocationCode, setChangeLocationCode] = React.useState('');\n    const [LocationCodes, setLocationCodes]= React.useState([])\n    const [FromDate, setFromDate] = React.useState(null);\n    const [Todate,setTodate] = React.useState(moment(new Date()).format(\"YYYY-MM-DD\"))\n    const [FinalResult, setFinalResult] = React.useState([\" \"])\n    useEffect( async () => {\n      \n      let result = await Get(`/common/getLocationCodeList`, 'prssvl')\n      if (result.data){\n        const codes = result.data;\n        setLocationCodes(codes);\n      } \n    }, []);\n\n    const handleChangeLocationCode=async(event)=>{\n      // console.log(event.target.value)\n      setChangeLocationCode(event.target.value)\n      // const res = await Get(`/cycleCountHistory/getCycleCountHistory?LocationCode=`+event.target.value)\n    }\n    //Maintenance?a=1&b=2\n    const handlefetch=async()=>{\n      const res = await Get(`/cycleCountHistory/getCycleCountHistory?LocationCode=`+ChangeLocationCode+\"&\"+\"ToDate=\"+Todate+\"&\"+\"FromDate=\"+FromDate)\n      if(res.data){\n        const res1 = res.data\n        setFinalResult(res1)\n      }\n    }\n    const data = {\n      'LocationCode': ChangeLocationCode,\n      'FromDate': FromDate,\n      'ToDate': Todate\n    }\n    return(\n        <Box sx={{ m: 1}}>\n        <div>\n        <Paper elevation={0} sx={{ width: \"100%\", m: 1 }}>\n        <Stack direction=\"row\" sx={{mt:5}} >\n        <FormControl sx={{ m: 1, width:'200px' }} size=\"small\">\n      <InputLabel label=\"LocationCode\">LocationCode</InputLabel>\n      <Select\n        name=\"LocationCode\"\n        role=\"ChooseLocationCode\"\n        labelId=\"LocationCodes\"\n        id=\"LocationCodes\"\n        value={ChangeLocationCode}\n        label=\"LocationCode\"\n        onChange={handleChangeLocationCode}\n      >\n        <MenuItem key=\"LocationCode\" value=\"\">\n          <em>All LocationCodes</em>\n        </MenuItem>\n        {LocationCodes.map(ele => {\n                return (\n                  <MenuItem key={ele.LocationCode} value={ele.LocationCode}>\n                    {ele.LocationCode}\n                  </MenuItem>\n                )\n              })}\n      </Select>\n    </FormControl>\n    <FormControl sx={{ m: 1, width:'200px' }} role=\"ChooseFromDate\" name=\"FromDate\" size=\"small\">\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DatePicker\n        size=\"small\"\n        label=\"From\"\n        value={FromDate}\n        onChange={(newValue) => {\n          const date = moment(newValue).format(\"YYYY-MM-DD\")\n          setFromDate(date);\n        }}\n        renderInput={(params) => <TextField size=\"small\" {...params} />}\n      />\n    </LocalizationProvider>\n    </FormControl>\n    <FormControl sx={{ m: 1, width:'200px' }} role=\"ChooseToDate\" size=\"small\">\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DatePicker\n        size=\"small\"\n        label=\"To\"\n        value={Todate}\n        onChange={(newValue) => {\n          const date = moment(newValue).format(\"YYYY-MM-DD\")\n          // console.log(\"Date new:\",date)\n          setTodate(date)\n        }}\n        renderInput={(params) => <TextField size=\"small\" {...params} />}\n      />\n    </LocalizationProvider>\n    </FormControl>\n    {/* {console.log(\"FinalResult:\",FinalResult[0])} */}\n    <FormControl sx={{ m: 1, width:'200px' }} size=\"small\">\n    <ExportButton reportId=\"CycleCountHistory\" data={data} />\n    </FormControl>\n    </Stack>\n        </Paper>\n        </div>\n        </Box>\n    )\n}"],"sourceRoot":""}